class PostsController < ApplicationController
#before_action filter to call the require_sign_in method before each of the controller actions, except for the show action
  before_action :require_sign_in, except: :show
  before_action :authorize_user, except: [:show, :new, :create]

  def show
    @post = Post.find(params[:id])
  end
#find the post that corresponds to the id in the params that was passed to show &
#assign it to @post. Unlike in the index method, in the show method,
#populate an instance variable with a single post, rather than a collection of posts.


  def new
    @topic = Topic.find(params[:topic_id])
    @post = Post.new
#create an instance variable, @post, then assign it an empty post returned by Post.new
  end

  def create
#When the user clicks Save, the create method is called. create either updates the database
#with the save method, or returns an error. Unlike new, create does not have a corresponding view.
#create works behind the scenes to collect the data submitted by the user and update the database. create is a POST action.
     @topic = Topic.find(params[:topic_id])
     @post = @topic.posts.build(post_params)
     @post.user = current_user
#assign @post.user in the same way we assigned @post.topic, to properly scope the new post.
     if @post.save
       @post.labels = Label.update_labels(params[:post][:labels])
       flash[:notice] = "Post was saved."
#change the redirect to use the nested post path
#if we successfully save Post to the database, we display a success message
#using flash[:notice]and redirect the user to the route generated by @post.
#Redirecting to @post will direct the user to the posts show view.
       redirect_to [@topic, @post]
#if we do not successfully save Post to the database,
#we display an error message and render the new view again.
     else
       flash.now[:alert] = "There was an error saving the post. Please try again."
       render :new
     end
   end

  def edit
    @post = Post.find(params[:id])
  end

  def update
     @post = Post.find(params[:id])
     @post.assign_attributes(post_params)

     if @post.save
       @post.labels = Label.update_labels(params[:post][:labels])
       flash[:notice] = "Post was updated."
#change the redirect to use the *nested* post path
       redirect_to [@post.topic, @post]
     else
       flash.now[:alert] = "There was an error saving the post. Please try again."
       render :edit
     end
   end

   def destroy
        @post = Post.find(params[:id])

        if @post.destroy
          flash[:notice] = "\"#{@post.title}\" was deleted successfully."
#when a post is deleted, we direct users to the topic show view
          redirect_to @post.topic
        else
          flash.now[:alert] = "There was an error deleting the post."
          render :show
        end
      end
private

    def post_params
      params.require(:post).permit(:title, :body)
    end
    def authorize_user
         post = Post.find(params[:id])

         unless current_user == post.user || current_user.admin?
           flash[:alert] = "You must be an admin to do that."
           redirect_to [post.topic, post]
         end
       end

end
